{
	"info": {
		"_postman_id": "0a3aa003-c385-4fad-8bfa-233a45853a28",
		"name": "Ticket Monster",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "9152223"
	},
	"item": [
		{
			"name": "Events",
			"item": [
				{
					"name": "POST Create Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"event_id\");",
									"pm.collectionVariables.unset(\"event_name\");",
									"",
									"function generateRandomString(length) {",
									"    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let result = \"\";",
									"    for (let i = 0; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * charset.length);",
									"        result += charset.charAt(randomIndex);",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.collectionVariables.set(\"event_name\", generateRandomString(10))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{event_name}}\", \n    \"mediaItem\": {\n        \"id\": 1\n    },\n    \"category\": {\n        \"id\": 1\n    },\n    \"description\": \"here is a description for a new event\"\n}\n\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/forge/events",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Events",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const index = jsonData.findIndex(item => item.name === pm.collectionVariables.get(\"event_name\"))",
									"",
									"pm.collectionVariables.set(\"event_id\", jsonData[index].id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/events",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Event By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/events/{{event_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const name = pm.collectionVariables.get(\"event_name\");",
									"pm.collectionVariables.set(\"event_name\", \"updated \" + name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{event_name}}\",\n    \"mediaItem\": {\n        \"id\": 1\n    },\n    \"category\": {\n        \"id\": 1\n    },\n    \"description\": \"here is a description for a new event\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/forge/events/{{event_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Event",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/forge/events/{{event_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"events",
								"{{event_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Venues",
			"item": [
				{
					"name": "POST Create Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"venue_id\");",
									"pm.collectionVariables.unset(\"venue_name\");",
									"",
									"function generateRandomString(length) {",
									"    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let result = \"\";",
									"    for (let i = 0; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * charset.length);",
									"        result += charset.charAt(randomIndex);",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.collectionVariables.set(\"venue_name\", generateRandomString(10))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{venue_name}}\",\n    \"mediaItem\": {\n        \"id\": 1\n    },\n    \"description\": \"Based in Dublin\",\n    \"sections\": [\n        {\n            \"id\": 1\n        },\n        {\n            \"id\": 2\n        },\n        {\n            \"id\": 3\n        }\n    ],\n    \"capacity\": 50000,\n    \"address\": {\n        \"street\": \"Street\",\n        \"city\": \"City\",\n        \"country\": \"Ireland\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/forge/venues",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Venues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const index = jsonData.findIndex(item => item.name === pm.collectionVariables.get(\"venue_name\"))",
									"",
									"pm.collectionVariables.set(\"venue_id\", jsonData[index].id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/venues",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"venues"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Venue By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/venues/{{venue_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const name = pm.collectionVariables.get(\"venue_name\");",
									"pm.collectionVariables.set(\"venue_name\", \"updated \" + name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{venue_name}}\",\n    \"mediaItem\": {\n        \"id\": 1\n    },\n    \"description\": \"Based in Dublin\",\n    \"sections\": [\n        {\n            \"id\": 1\n        },\n        {\n            \"id\": 2\n        },\n        {\n            \"id\": 3\n        }\n    ],\n    \"capacity\": 50000,\n    \"address\": {\n        \"street\": \"Street\",\n        \"city\": \"City\",\n        \"country\": \"Ireland\"\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/forge/venues/{{venue_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Venue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/forge/venues/{{venue_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"forge",
								"venues",
								"{{venue_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Category",
			"item": [
				{
					"name": "POST Create Event Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"eventcategory_id\");",
									"pm.collectionVariables.unset(\"eventcategory_name\");",
									"",
									"function generateRandomString(length) {",
									"    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let result = \"\";",
									"    for (let i = 0; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * charset.length);",
									"        result += charset.charAt(randomIndex);",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.collectionVariables.set(\"eventcategory_name\", generateRandomString(6))",
									"",
									"console.log(pm.collectionVariables.get(\"eventcategory_name\"))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{eventcategory_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/eventcategories",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"eventcategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Event Categories",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const index = jsonData.findIndex(item => item.description === pm.collectionVariables.get(\"eventcategory_name\"))",
									"",
									"pm.collectionVariables.set(\"eventcategory_id\", jsonData[index].id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/eventcategories",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"eventcategories"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Event Category By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/eventcategories/{{eventcategory_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"eventcategories",
								"{{eventcategory_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Event Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const name = pm.collectionVariables.get(\"eventcategory_name\");",
									"pm.collectionVariables.set(\"eventcategory_name\", \"updated \" + name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"description\": \"{{eventcategory_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/eventcategories/{{eventcategory_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"eventcategories",
								"{{eventcategory_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Event Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/eventcategories/{{eventcategory_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"eventcategories",
								"{{eventcategory_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sections",
			"item": [
				{
					"name": "POST Create Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"section_id\");",
									"pm.collectionVariables.unset(\"section_name\");",
									"",
									"function generateRandomString(length) {",
									"    const charset = \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789\";",
									"    let result = \"\";",
									"    for (let i = 0; i < length; i++) {",
									"        const randomIndex = Math.floor(Math.random() * charset.length);",
									"        result += charset.charAt(randomIndex);",
									"    }",
									"    return result;",
									"}",
									"",
									"pm.collectionVariables.set(\"section_name\", generateRandomString(10))"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{section_name}}\",\n    \"description\": \"New Section Description\",\n    \"numberOfRows\": 50,\n    \"rowCapacity\": 200,\n    \"capacity\": 200,\n    \"venue\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/sections",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"sections"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Sections",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const index = jsonData.findIndex(item => item.name === pm.collectionVariables.get(\"section_name\"))",
									"",
									"pm.collectionVariables.set(\"section_id\", jsonData[index].id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/sections",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"sections"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Section By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/sections/{{section_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"sections",
								"{{section_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const name = pm.collectionVariables.get(\"section_name\");",
									"pm.collectionVariables.set(\"section_name\", \"updated \" + name)"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{section_name}}\",\n    \"description\": \"New Section Description\",\n    \"numberOfRows\": 50,\n    \"rowCapacity\": 200,\n    \"capacity\": 200,\n    \"venue\": {\n        \"id\": 1\n    }\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/sections/{{section_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"sections",
								"{{section_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Section",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/sections/{{section_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"sections",
								"{{section_id}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Performances",
			"item": [
				{
					"name": "POST Create Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.collectionVariables.unset(\"performance_id\");",
									"pm.collectionVariables.unset(\"performance_name\");",
									"",
									"function generateRandomDateBetween2026And2036() {",
									"  // Define a range for years (2026-2036), months (0-11), days (1-31), and hours (0-23)",
									"  const randomYear = Math.floor(Math.random() * 11) + 2026; // 2026-2036 for years",
									"  const randomMonth = Math.floor(Math.random() * 12); // 0-11 for months",
									"  const randomDay = Math.floor(Math.random() * 31) + 1; // 1-31 for days",
									"  const randomHour = Math.floor(Math.random() * 24); // 0-23 for hours",
									"  ",
									"  // Create a Date object with the specified year, random month, day, and hour",
									"  const randomDate = new Date(randomYear, randomMonth, randomDay, randomHour, 0, 0, 0);",
									"  ",
									"  return randomDate;",
									"}",
									"",
									"pm.collectionVariables.set(\"performance_name\", generateRandomDateBetween2026And2036())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"show\": {\n        \"id\": 1\n    },\n    \"date\": \"{{performance_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/performances",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"performances"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Performances",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"const index = jsonData.findIndex(item => Date.parse(pm.collectionVariables.get(\"performance_name\")) === item.date)",
									"",
									"pm.collectionVariables.set(\"performance_id\", jsonData[index].id);",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/performances",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"performances"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET Performance By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/performances/{{performance_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"performances",
								"{{performance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT Update Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function generateRandomDateBetween2026And2036() {",
									"  // Define a range for years (2026-2036), months (0-11), days (1-31), and hours (0-23)",
									"  const randomYear = Math.floor(Math.random() * 11) + 2026; // 2026-2036 for years",
									"  const randomMonth = Math.floor(Math.random() * 12); // 0-11 for months",
									"  const randomDay = Math.floor(Math.random() * 31) + 1; // 1-31 for days",
									"  const randomHour = Math.floor(Math.random() * 24); // 0-23 for hours",
									"  ",
									"  // Create a Date object with the specified year, random month, day, and hour",
									"  const randomDate = new Date(randomYear, randomMonth, randomDay, randomHour, 0, 0, 0);",
									"  ",
									"  return randomDate;",
									"}",
									"",
									"pm.collectionVariables.set(\"performance_name\", generateRandomDateBetween2026And2036())"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"show\": {\n        \"id\": 3\n    },\n    \"date\": \"{{performance_name}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{server_url}}/rest/performances/{{performance_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"performances",
								"{{performance_id}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE Performance",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{server_url}}/rest/performances/{{performance_id}}",
							"host": [
								"{{server_url}}"
							],
							"path": [
								"rest",
								"performances",
								"{{performance_id}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "event_name",
			"value": ""
		},
		{
			"key": "venue_name",
			"value": ""
		},
		{
			"key": "eventcategory_name",
			"value": ""
		},
		{
			"key": "performance_name",
			"value": ""
		},
		{
			"key": "section_name",
			"value": ""
		},
		{
			"key": "server_url",
			"value": "http://localhost:5000",
			"type": "string"
		},
		{
			"key": "event_id",
			"value": ""
		},
		{
			"key": "venue_id",
			"value": ""
		},
		{
			"key": "eventcategory_id",
			"value": ""
		},
		{
			"key": "section_id",
			"value": ""
		},
		{
			"key": "performance_id",
			"value": ""
		}
	]
}